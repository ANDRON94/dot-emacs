* Common Utils
** Files
#+begin_src emacs-lisp :tangle yes
(defun my-make-valid-path (path)
  "Check whether all directories in PATH exists
and if necessary create missing directories."
  (make-directory (file-name-directory path) :parents)
  path)

(defun my-get-full-emacs-path (relative-path)
  "Return full(absolute) path for RELATIVE-PATH.
RELATIVE-PATH should be the path relative to user's Emacs directory."
  (expand-file-name relative-path user-emacs-directory))
#+end_src
* Layers
** Appearance
*** General
**** Disable the welcome message
#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-message t)
#+end_src
**** Make 'bell signal' a visible
#+begin_src emacs-lisp :tangle yes
(setq visible-bell t)
#+end_src
**** Disable tool bar
#+begin_src emacs-lisp :tangle yes
(tool-bar-mode -1)
#+end_src
**** TODO Hide minor modes from mode line
 #+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'autorevert
  (diminish 'auto-revert-mode))
(with-eval-after-load 'abbrev
  (diminish 'abbrev-mode))
 #+end_src
**** Run ediff control panel in the current frame
 #+begin_src emacs-lisp :tangle yes
(defun my--use-ediff-plain-windows ()
  "Show all ediff windows in one frame."
  (setq ediff-window-setup-function
        'ediff-setup-windows-plain))

(add-hook 'ediff-load-hook 'my--use-ediff-plain-windows)
  #+end_src
**** Show scroll bar at right side of window
 #+begin_src emacs-lisp :tangle yes
(set-scroll-bar-mode 'right)
 #+end_src
**** Turn of cursor blinking
 #+begin_src emacs-lisp :tangle yes
(blink-cursor-mode 0)
 #+end_src
*** Theme
 #+begin_src emacs-lisp :tangle yes
(use-package darktooth-theme
  :load-path  "configuration/custom-packages/emacs-theme-darktooth")
 #+end_src
*** Modeline
 #+begin_src emacs-lisp :tangle yes
(use-package powerline
  :ensure t
  :config
  ;; Format of mode line.
  (powerline-center-theme)
  ;; Mode line separator.
  (setq powerline-default-separator 'wave))

(use-package flycheck-color-mode-line
  :ensure t
  :hook (flycheck-mode . flycheck-color-mode-line-mode))
 #+end_src
*** Lines
 #+begin_src emacs-lisp :tangle yes
(use-package nlinum
  :ensure t
  :config
  ;; Toggle Nlinum mode in all buffers.
  (global-nlinum-mode +1))
 #+end_src
** TODO Edit
*** General
**** Always end a file with a newline
#+begin_src emacs-lisp :tangle yes
(setq require-final-newline t)
#+end_src
**** Always allow region narrowing
#+begin_src emacs-lisp :tangle yes
(put 'narrow-to-region 'disabled nil)
#+end_src
**** Use space to indent by default
#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
#+end_src
*** Multiple cursors
#+begin_src emacs-lisp :tangle yes
(use-package multiple-cursors
  :ensure t
  :demand t
  :bind
  ("C-S-c C-S-c" . mc/edit-lines)
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-c C-<" . mc/mark-all-like-this)
  :config
  ;; Move 'multiple-cursors' related util files to the common directory.
  (setq mc/list-file (my-make-valid-path
                      (my-get-full-emacs-path
                       ".cache/multiple-cursors/mc-lists.el"))))
#+end_src
*** Parenthesis
#+begin_src emacs-lisp :tangle yes
(use-package smartparens
  :ensure t
  :demand t
  :bind
  (:map smartparens-mode-map
        ;; Navigation
        ;; TODO: setup smarparens navigation
        ("C-M-f" . sp-forward-sexp)
        ("C-M-b" . sp-backward-sexp)
        ;; Manipulation
        ;; TODO: setup smartparens manipulation
        ("C-M-k" . sp-kill-sexp)
        ("C-M-w" . sp-copy-sexp)
        ("M-<delete>" . sp-unwrap-sexp)
        ("C-]" . sp-select-next-thing)
        ("C-M-]" . sp-select-previous-thing))
  :config
  ;; Enable the default configuration.
  (require 'smartparens-config)
  ;; Hide smartparens from mode line.
  (with-eval-after-load 'smartparens
    (diminish 'smartparens-mode))
  ;; Toggle Show-Smartparens mode(highlight parenthesis) in all buffers.
  (show-smartparens-global-mode +1)
  ;; Toggle Smartparens mode in all buffers.
  (smartparens-global-mode +1))
#+end_src
** TODO Interface Enchancement
*** General
**** Use "y" or "n" instead of "yes" or "not"
 #+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
 #+end_src
*** External Commands Execution
 #+begin_src emacs-lisp :tangle yes
(use-package multi-compile
  :ensure t
  :config
  ;; Make "multi-compile-alist" safe as local variable.
  ;; It's useful for creating ".dir-locals.el".
  (put 'multi-compile-alist 'safe-local-variable #'listp)
  ;; Move 'multi-compile' related util files to the common directory.
  (setq multi-compile-history-file
        (my-make-valid-path
         (my-get-full-emacs-path
          ".cache/multi-compile/multi-compile.cache")))
  ;; Set "helm" completion system after "helm" is loaded.
  (with-eval-after-load 'helm
    (setq multi-compile-completion-system 'helm)))
 #+end_src
*** Incremental Completions
**** Ido
**** Helm
**** Ivy
** Languages
*** C#
*** C++
**** General
***** Use 4 spaces indentation for C++
#+begin_src emacs-lisp :tangle yes
(defun my--set-c++-code-style ()
  "Set code style for C++ language."
  (c-set-style "stroustrup"))

(add-hook 'c++-mode-hook 'my--set-c++-code-style)
#+end_src
*** Common Lisp
*** Dockerfile
#+begin_src emacs-lisp :tangle yes
(use-package dockerfile-mode
  :ensure t)
#+end_src
** Network
*** Remote file access
#+begin_src emacs-lisp :tangle yes
(use-package tramp
  :ensure t
  :config
  ;; Move 'tramp' related util files to the common directory.
  (setq tramp-persistency-file-name (my-make-valid-path
                                     (my-get-full-emacs-path
                                      ".cache/tramp/tramp"))))
#+end_src
** Miscellaneous
*** General
**** Save all backups in one place
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist
      `(("" . ,(my-make-valid-path (my-get-full-emacs-path ".cache/backup")))))
#+end_src
**** Configure recent files list
#+begin_src emacs-lisp :tangle yes
(use-package recentf
  :ensure t
  :config
  ;; Move 'recentf' related util files to the common directory
  (setq recentf-save-file (my-make-valid-path
                           (my-get-full-emacs-path
                            ".cache/recentf/recentf"))))
#+end_src
