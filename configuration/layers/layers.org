* Common Utils
** Files
#+begin_src emacs-lisp :tangle yes
(defun my-make-valid-path (path)
  "Check whether all directories in PATH exists
and if necessary create missing directories."
  (make-directory (file-name-directory path) :parents)
  path)

(defun my-get-full-emacs-path (relative-path)
  "Return full(absolute) path for RELATIVE-PATH.
RELATIVE-PATH should be the path relative to user's Emacs directory."
  (expand-file-name relative-path user-emacs-directory))
#+end_src
* Layers
** Appearance
*** General
**** Disable the welcome message
#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-message t)
#+end_src
**** Make 'bell signal' a visible
#+begin_src emacs-lisp :tangle yes
(setq visible-bell t)
#+end_src
**** Disable tool bar
#+begin_src emacs-lisp :tangle yes
(tool-bar-mode -1)
#+end_src
**** TODO Hide minor modes from mode line
 #+begin_src emacs-lisp :tangle yes
(use-package autorevert
  :ensure t
  :diminish auto-revert-mode)

(use-package abbrev
  :diminish abbrev-mode)
 #+end_src
**** Run ediff control panel in the current frame
 #+begin_src emacs-lisp :tangle yes
(defun my--use-ediff-plain-windows ()
  "Show all ediff windows in one frame."
  (setq ediff-window-setup-function
        'ediff-setup-windows-plain))

(add-hook 'ediff-load-hook 'my--use-ediff-plain-windows)
  #+end_src
**** Show scroll bar at right side of window
 #+begin_src emacs-lisp :tangle yes
(set-scroll-bar-mode 'right)
 #+end_src
**** Turn of cursor blinking
 #+begin_src emacs-lisp :tangle yes
(blink-cursor-mode 0)
 #+end_src
*** Theme
 #+begin_src emacs-lisp :tangle yes
(use-package darktooth-theme
  :init (setq custom--inhibit-theme-enable nil)
  :load-path  "configuration/custom-packages/emacs-theme-darktooth")
 #+end_src
*** Modeline
 #+begin_src emacs-lisp :tangle yes
(use-package powerline
  :ensure t
  :config
  ;; Format of mode line.
  (powerline-center-theme)
  ;; Mode line separator.
  (setq powerline-default-separator 'wave))

(use-package flycheck-color-mode-line
  :ensure t
  :hook (flycheck-mode . flycheck-color-mode-line-mode))
 #+end_src
*** Lines
 #+begin_src emacs-lisp :tangle yes
(use-package nlinum
  :ensure t
  :config
  ;; Toggle Nlinum mode in all buffers.
  (global-nlinum-mode +1))
 #+end_src
** Edit
*** General
**** Always end a file with a newline
#+begin_src emacs-lisp :tangle yes
(setq require-final-newline t)
#+end_src
**** Always allow region narrowing
#+begin_src emacs-lisp :tangle yes
(put 'narrow-to-region 'disabled nil)
#+end_src
**** Use space to indent by default
#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
#+end_src
*** Multiple cursors
#+begin_src emacs-lisp :tangle yes
(use-package multiple-cursors
  :ensure t
  :demand t
  :bind
  ("C-S-c C-S-c" . mc/edit-lines)
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-c C-<" . mc/mark-all-like-this)
  :config
  ;; Move 'multiple-cursors' related util files to the common directory.
  (setq mc/list-file (my-make-valid-path
                      (my-get-full-emacs-path
                       ".cache/multiple-cursors/mc-lists.el"))))
#+end_src
*** TODO Parenthesis
#+begin_src emacs-lisp :tangle yes
(use-package smartparens
  :ensure t
  :demand t
  :bind
  (:map smartparens-mode-map
        ;; Navigation
        ;; TODO: setup smarparens navigation
        ("C-M-f" . sp-forward-sexp)
        ("C-M-b" . sp-backward-sexp)
        ;; Manipulation
        ;; TODO: setup smartparens manipulation
        ("C-M-k" . sp-kill-sexp)
        ("C-M-w" . sp-copy-sexp)
        ("M-<delete>" . sp-unwrap-sexp)
        ("C-]" . sp-select-next-thing)
        ("C-M-]" . sp-select-previous-thing))
  :diminish smartparens-mode
  :config
  ;; Enable the default configuration.
  (require 'smartparens-config)
  ;; Toggle Show-Smartparens mode(highlight parenthesis) in all buffers.
  (show-smartparens-global-mode +1)
  ;; Toggle Smartparens mode in all buffers.
  (smartparens-global-mode +1))
#+end_src
*** Snippets
#+begin_src emacs-lisp :tangle yes
(defun my--disable-yasnippet-mode ()
  "Disable yasnippet mode."
  (yas-minor-mode -1))

(use-package yasnippet
  :ensure t
  :config
  ;; Move 'yasnippet' related util files to the common directory.
  (setq yas-snippet-dirs (list (my-make-valid-path
                                (my-get-full-emacs-path
                                 ".cache/yasnippet/snippets/"))))
  ;; Disable yasnippet in terminal mode.
  (add-hook 'term-mode-hook 'my--disable-yasnippet-mode)
  ;; Activate yasnippet mode globally.
  (yas-global-mode +1))

(use-package yasnippet-snippets
  :ensure t
  :after (yasnippet)
  :config
  (yasnippet-snippets-initialize))
#+end_src
** Interface Enchancement
*** General
**** Use "y" or "n" instead of "yes" or "not"
 #+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
 #+end_src
*** External Commands Execution
 #+begin_src emacs-lisp :tangle yes
(use-package multi-compile
  :ensure t
  :config
  ;; Make "multi-compile-alist" safe as local variable.
  ;; It's useful for creating ".dir-locals.el".
  (put 'multi-compile-alist 'safe-local-variable #'listp)
  ;; Move 'multi-compile' related util files to the common directory.
  (setq multi-compile-history-file
        (my-make-valid-path
         (my-get-full-emacs-path
          ".cache/multi-compile/multi-compile.cache")))
  ;; Set "helm" completion system after "helm" is loaded.
  (with-eval-after-load 'helm
    (setq multi-compile-completion-system 'helm)))
 #+end_src
*** Incremental Completions
**** Ido
**** TODO Helm
#+begin_src emacs-lisp :tangle yes
;; (defun my-browse-url-chrome-incognito (url &optional _ignore)
;;   "Browse URL in Google Chrome incognito mode."
;;   (helm-generic-browser url "google-chrome" "--incognito"))
;; (with-eval-after-load 'helm-net
;;      (when (executable-find "curl")
;;        ;; Use curl to fetch candidates from Google.
;;        (my-setq-when-bound helm-net-prefer-curl t))
;;      ;; Open search result in Chrome incognito mode.
;;      (my-setq-when-bound helm-google-suggest-default-browser-function
;;                          'my-browse-url-chrome-incognito))
;; bind keys
;; ("C-c h g" . helm-google-suggest)

;; (if (boundp 'helm-sources-using-default-as-input)
;;        (add-to-list 'helm-sources-using-default-as-input
;;                     'helm-source-man-pages))

(use-package helm
  :ensure t
  :bind
  ("M-x" . helm-M-x)
  ("M-y" . helm-show-kill-ring)
  ("C-x b" . helm-mini)
  ("C-x C-f" . helm-find-files)
  ("C-c h o" . helm-occur)
  (:map helm-map
        ([tab] . helm-execute-persistent-action)
        ("C-i" . helm-execute-persistent-action)
        ("C-z" . helm-select-action))
  :diminish helm-mode
  :config
  (require 'helm-config)
  ;; Commdand prefix setup
  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  (setq
   ;; TODO: helm-ff-file-name-history-use-recentf t
   ;; Open helm buffer inside current window,
   ;; not occupy whole other window.
   helm-split-window-in-side-p t
   ;; Move to end or beginning of source
   ;; when reaching top or bottom of source.
   helm-move-to-line-cycle-in-source nil
   ;; Scroll 8 lines other window using M-<next>/M-<prior>.
   helm-scroll-amount 8
   ;; Search for library in `require' and `declare-function' sexp.
   helm-ff-search-library-in-sexp t
   ;; Follow results.
   helm-follow-mode-persistent t)
  ;; Toggle helm in all buffers.
  (helm-mode +1))
#+end_src
**** Ivy
** Languages
*** C#
**** Navigation, autocomplete, syntax checking
#+begin_src emacs-lisp :tangle yes
(defun my--set-csharp-company-backends ()
  "Set the list of company backends for C# locally."
  (setq-local company-backends
              '((company-omnisharp
                 :separate
                 company-dabbrev
                 company-yasnippet))))

(use-package omnisharp
  :ensure t
  :hook (csharp-mode . omnisharp-mode)
  :bind
  (:map csharp-mode-map
        ("M-." . omnisharp-go-to-definition)
        ("M-?" . omnisharp-helm-find-usages)
        ("C-c r" . omnisharp-run-code-action-refactoring))
  :config
  ;; Use custom version of omnisharp server.
  (setq omnisharp-expected-server-version "1.30.1")
  ;; Define company backends for C#.
  (with-eval-after-load 'company
    (add-hook 'csharp-mode-hook 'my--set-csharp-company-backends))
  ;; Use flycheck for C#.
  (with-eval-after-load 'flycheck
    (add-hook 'csharp-mode-hook 'flycheck-mode)))
 #+end_src
*** C++
**** General
***** Use 4 spaces indentation for C++
#+begin_src emacs-lisp :tangle yes
(defun my--set-c++-code-style ()
  "Set code style for C++ language."
  (c-set-style "stroustrup"))

(add-hook 'c++-mode-hook 'my--set-c++-code-style)
#+end_src
**** Navigation, autocomplete, syntax checking
#+begin_src emacs-lisp :tangle yes
(defun my--pulse-line-hook-function (&optional prefix)
  "Wrapper around `pulse-line-hook-function' with the ignored PREFIX argument.
It is used as advice for several `rtags' functions."
  (ignore prefix)
  (pulse-line-hook-function))

(use-package rtags
  :ensure t
  :bind
  (:map c-mode-map
        ("M-." . rtags-find-symbol-at-point)
        ("M-?" . rtags-find-references-at-point)
        ("M-," . rtags-location-stack-back)
   :map c++-mode-map
        ("M-." . rtags-find-symbol-at-point)
        ("M-?" . rtags-find-references-at-point)
        ("M-," . rtags-location-stack-back))
  :config
  ;; Set installation path for RTags server.
  (setq rtags-install-path (my-make-valid-path
                            (my-get-full-emacs-path
                             ".cache/rtags")))
  ;; Add line pulsing for `rtags' search functions:
  (advice-add 'rtags-find-symbol-at-point
              :after 'my--pulse-line-hook-function)
  (advice-add 'rtags-find-references-at-point
              :after 'my--pulse-line-hook-function)
  (advice-add 'rtags-location-stack-back
              :after 'my--pulse-line-hook-function))

(use-package helm-rtags
  :ensure t
  :after (helm rtags)
  :config
  ;; Integrate RTags with Helm.
  (with-eval-after-load 'helm
    (setq rtags-display-result-backend 'helm)))

(defun my--irony-setup-completion-functions ()
  "Replace the `completion-at-point' and `complete-symbol' bindings
in irony-mode's buffers by irony-mode's function."
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))

(use-package irony
  :ensure t
  :hook ((c-mode c++-mode) . irony-mode)
  :config
  ;; Rebind completion functions for irony mode.
  (add-hook 'irony-mode-hook 'my--irony-setup-completion-functions)
  ;; Setup C++ completion database(according to compile options).
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

(use-package company-irony
  :ensure t
  :after (company irony)
  :config
  ;; Integrate company with irony.
  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands))

(defun my--set-c++-company-backends ()
  "Set the list of company backends for C++ locally."
  (if (boundp 'company-backends)
      (setq-local company-backends
                  '((company-irony
                     company-irony-c-headers
                     :separate
                     company-dabbrev
                     company-yasnippet)))))

(use-package company-irony-c-headers
  :ensure t
  :after (company-irony company irony)
  :config
  ;; Define company backends for C++.
  (add-hook 'c++-mode-hook 'my--set-c++-company-backends))

(use-package flycheck-irony
  :ensure t
  :after (flycheck irony)
  :config
  ;; Use flycheck for C.
  (add-hook 'c-mode-hook 'flycheck-mode)
  ;; Use flycheck for C++.
  (add-hook 'c++-mode-hook 'flycheck-mode)
  ;; Integrate flycheck with irony.
  (add-hook 'flycheck-mode-hook 'flycheck-irony-setup))
#+end_src
*** Common Lisp
**** Navigation, autocomplete, syntax checking
#+begin_src emacs-lisp :tangle yes
(defun my--set-lisp-company-backends ()
  "Set the list of company backends for Common Lisp locally."
  (if (boundp 'company-backends)
      (setq-local company-backends '(company-capf))))

(use-package sly
  :ensure t
  :config
  (with-eval-after-load 'company
    (add-hook 'lisp-mode-hook 'my--set-lisp-company-backends)
    (add-hook 'sly-mrepl-hook 'my--set-lisp-company-backends)))
#+end_src
*** Dockerfile
#+begin_src emacs-lisp :tangle yes
(use-package dockerfile-mode
  :ensure t)
#+end_src
*** TODO Web
#+begin_src emacs-lisp :tangle yes
(use-package web-mode
  :ensure t
  :mode ("\\.html?\\'" "\\.xml?\\'" "\\.css\\'"
         "\\.scss\\'" "\\.js\\'" "\\.tpl\\'")
  :config
  ;; Setup HTML, CSS and script indentation.
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2)
  ;; TODO: (add-hook 'web-mode-hook 'flycheck-mode)
  ;; TODO: Integrate flycheck with Web
  ;; (flycheck-add-mode 'html-tidy 'web-mode)
  )
#+end_src
** Network
*** Remote file access
#+begin_src emacs-lisp :tangle yes
(use-package tramp
  :ensure t
  :config
  ;; Move 'tramp' related util files to the common directory.
  (setq tramp-persistency-file-name (my-make-valid-path
                                     (my-get-full-emacs-path
                                      ".cache/tramp/tramp")))
  ;; It seems that "ssh" method is faster than the default method "scp".
  (setq tramp-default-method "ssh"))
#+end_src
** Miscellaneous
*** General
**** Save all backups in one place
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist
      `(("" . ,(my-make-valid-path (my-get-full-emacs-path ".cache/backup")))))
#+end_src
**** Configure recent files list
#+begin_src emacs-lisp :tangle yes
(use-package recentf
  :ensure t
  :config
  ;; Move 'recentf' related util files to the common directory
  (setq recentf-save-file (my-make-valid-path
                           (my-get-full-emacs-path
                            ".cache/recentf/recentf"))))
#+end_src
