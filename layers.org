* Table of Contents
#+begin_quote
- [[#common-utils][Common utils]]
 - [[#files][Files]]
- [[#bootstrap][Bootstrap]]
- [[#layers][Layers]]
 - [[#miscellaneous][Miscellaneous]]
 - [[#appearance][Appearance]]
 - [[#visual][Visual]]
 - [[#edit][Edit]]
 - [[#interface-enchancement][Interface enchancement]]
 - [[#search--navigation][Search & Navigation]]
 - [[#project-management][Project management]]
 - [[#languages][Languages]]
 - [[#integration][Integration]]
 - [[#version-control][Version control]]
#+end_quote
* Common utils
** Files
#+begin_src emacs-lisp :tangle yes
(defun my-make-valid-path (path)
  "Check whether all directories in PATH exists
and if necessary create missing directories."
  (make-directory (file-name-directory path) :parents)
  path)

(defun my-get-full-emacs-path (relative-path)
  "Return full(absolute) path for RELATIVE-PATH.
RELATIVE-PATH should be the path relative to user's Emacs directory."
  (expand-file-name relative-path user-emacs-directory))
#+end_src
* Bootstrap
[[https://github.com/jwiegley/use-package][use-package]] will download and configure all packages automatically.
#+begin_src emacs-lisp :tangle yes
;; Install `use-package'(handy macro for package configuration)
;; if it wasn't installed before.
(unless (package-installed-p 'use-package)
  (package-install 'use-package)
  ;; Install `diminish' package that is useful to hide some minor
  ;; mode names from modeline.
  ;; `use-package' has support for it(through :diminish keyword)
  ;; but doesn't install it by default.
  (package-install 'diminish))

;; Load `use-package'.
(eval-when-compile
  (require 'use-package)
  ;; Report loading and configuration details.
  (setq use-package-verbose t))
;; Load `diminish'(see details above).
(require 'diminish)
;; Load `bind-key' package that is used for easy key bindings setup.
;; `use-package' has support for it(through :bind keyword).
(require 'bind-key)
#+end_src
* Layers
** Miscellaneous
*** General
**** Move util files of the built-in minor modes to the common directory
#+begin_src emacs-lisp :tangle yes
(use-package recentf
  :config
  ;; Move `recentf' related util files to the common directory.
  (setq recentf-save-file (my-make-valid-path
                           (my-get-full-emacs-path
                            ".cache/recentf/recentf"))))

;; Move `auto-save' related util files to the common directory.
(setq auto-save-list-file-prefix (my-make-valid-path
                                  (my-get-full-emacs-path
                                   ".cache/auto-save/sessions/")))
#+end_src
**** Save all backups in one place
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist
      `(("" . ,(my-make-valid-path (my-get-full-emacs-path ".cache/backup")))))
#+end_src
** Appearance
*** General
**** Disable the welcome message
#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-message t)
#+end_src
**** Make 'bell signal' a visible
#+begin_src emacs-lisp :tangle yes
(setq visible-bell t)
#+end_src
**** Disable menu bar
#+begin_src emacs-lisp :tangle yes
(menu-bar-mode -1)
#+end_src
**** Disable tool bar
#+begin_src emacs-lisp :tangle yes
(tool-bar-mode -1)
#+end_src
**** Disable scroll bar
#+begin_src emacs-lisp :tangle yes
;; Use `customize-set-variable' to disable the scroll bar
;; for Emacs run in daemon mode too.
(customize-set-variable 'scroll-bar-mode nil)
#+end_src
**** Hide built-in minor modes from mode line
 #+begin_src emacs-lisp :tangle yes
(use-package autorevert
  :diminish auto-revert-mode)

(use-package abbrev
  :diminish abbrev-mode)
 #+end_src
**** Run ediff control panel in the current frame
[[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]] provides a convenient way for simultaneous browsing through
the differences between a pair (or a triple) of files or buffers.
 #+begin_src emacs-lisp :tangle yes
(defun my--use-ediff-plain-windows ()
  "Show all ediff windows in one frame."
  (setq ediff-window-setup-function
        'ediff-setup-windows-plain))

(add-hook 'ediff-load-hook #'my--use-ediff-plain-windows)
  #+end_src
**** Turn of cursor blinking
 #+begin_src emacs-lisp :tangle yes
(blink-cursor-mode 0)
 #+end_src
*** Icons
[[https://github.com/domtronn/all-the-icons.el][A utility package]] to collect various Icon Fonts and propertize them within Emacs.
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons
  :ensure t)
#+end_src
*** Theme
**** COMMENT Light theme: Solarized
[[https://github.com/bbatsov/solarized-emacs][The Solarized colour theme]], ported to Emacs.
#+begin_src emacs-lisp :tangle yes
(use-package solarized-theme
  :ensure t
  :config
  (load-theme 'solarized-light t))
#+end_src
**** COMMENT Light theme: Leuven
Awesome Emacs [[https://github.com/fniessen/emacs-leuven-theme][color theme for white backgrounds.]]
#+begin_src emacs-lisp :tangle yes
(use-package leuven-theme
  :ensure t
  :config
  (load-theme 'leuven t))
#+end_src
**** Dark theme: Doom
An opinionated pack of [[https://github.com/hlissner/emacs-doom-themes][modern color-themes.]]
#+begin_src emacs-lisp :tangle yes
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src
*** Modeline
1. A fancy and fast [[https://seagle0128.github.io/doom-modeline/][mode-line]] inspired by minimalism design.
2. [[https://github.com/flycheck/flycheck-color-mode-line][Coloring the mode line]] according to the [[http://www.flycheck.org/en/latest/][Flycheck]] state of the current buffer.
 #+begin_src emacs-lisp :tangle yes
(defun my--enable-doom-modeline-icons (frame)
  "Show the icons in the modeline."
  (ignore frame)
  (setq doom-modeline-icon t))

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode +1)
  :config
  ;; Enable icons in the modeline when Emacs
  ;; is running in daemon mode too.
  (add-hook 'after-make-frame-functions
            #'my--enable-doom-modeline-icons)
  ;; Show current column number in the modeline.
  (setq column-number-mode t))

(use-package flycheck-color-mode-line
  :ensure t
  :after (flycheck)
  :hook (flycheck-mode . flycheck-color-mode-line-mode))
 #+end_src
*** Line numbers
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Display-Custom.html][Display line numbers.]]
 #+begin_src emacs-lisp :tangle yes
(use-package display-line-numbers
  :config
  ;; Set default type of line numbers to be `relative'.
  ;; (i.e. the number of the line relative to the line showing
  ;; the windowâ€™s point).
  (setq display-line-numbers-type 'relative)
  ;; Minimum width of space reserved for line number display.
  (setq-default display-line-numbers-width 5)
  ;; Activate `display-line-numbers' mode globally.
  (global-display-line-numbers-mode +1))
 #+end_src
** Visual
*** General
**** Show trailing whitespaces in prog mode
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Useless-Whitespace.html][Useless whitespace.]]
#+begin_src emacs-lisp :tangle yes
(defun my--show-trailing-whitespace ()
  "Show trailing whitespace."
  (setq show-trailing-whitespace 1))

(use-package whitespace
  :bind
  ("C-c w" . whitespace-mode)
  :hook (prog-mode . my--show-trailing-whitespace))
#+end_src
*** Highlight uncommitted changes
[[https://github.com/dgutov/diff-hl][Highlighting uncommitted]] changes.
#+begin_src emacs-lisp :tangle yes
(use-package diff-hl
  :ensure t
  :bind
  ("C-c d n" . diff-hl-next-hunk)
  ("C-c d p" . diff-hl-previous-hunk)
  ("C-c d r" . diff-hl-revert-hunk)
  :demand t
  :config
  ;; Integrate `diff-hl' with `magit'.
  (with-eval-after-load 'magit
    (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))
  ;; Perform highlighting on-the-fly.
  (diff-hl-flydiff-mode +1)
  ;; Activate `diff-hl' mode globally.
  (global-diff-hl-mode +1))
#+end_src
*** Highlight symbol under cursor
Automatic and manual [[https://github.com/nschum/highlight-symbol.el][symbol highlighting.]]
#+begin_src emacs-lisp :tangle yes
(use-package highlight-symbol
  :ensure t
  :bind
  ("C-c n h" . highlight-symbol)
  ("C-c n n" . highlight-symbol-next)
  ("C-c n p" . highlight-symbol-prev)
  ("C-c n r" . highlight-symbol-query-replace))
#+end_src
** Edit
*** General
**** Always end a file with a newline
#+begin_src emacs-lisp :tangle yes
(setq require-final-newline t)
#+end_src
**** Always allow region narrowing
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Narrowing.html][Narrowing.]]
#+begin_src emacs-lisp :tangle yes
(put 'narrow-to-region 'disabled nil)
#+end_src
**** Use space to indent by default
#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
#+end_src
*** Modal editing
#+begin_src emacs-lisp :tangle yes
(use-package evil
  :ensure t
  :config
  (evil-mode +1))
#+end_src
*** Multiple cursors
[[https://github.com/magnars/multiple-cursors.el][Multiple cursors for Emacs.]]
#+begin_src emacs-lisp :tangle yes
(use-package multiple-cursors
  :ensure t
  :bind
  ("C-S-c C-S-c" . mc/edit-lines)
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-c C-<" . mc/mark-all-like-this)
  :init
  ;; Move 'multiple-cursors' related util files to the common directory.
  (setq mc/list-file (my-make-valid-path
                      (my-get-full-emacs-path
                       ".cache/multiple-cursors/mc-lists.el"))))
#+end_src
*** Parenthesis
[[https://github.com/Fuco1/smartparens][Dealing with pairs.]]
#+begin_src emacs-lisp :tangle yes
(use-package smartparens
  :ensure t
  :bind
  (:map smartparens-mode-map
        ;; Navigation
        ("C-M-f" . sp-forward-sexp)
        ("C-M-b" . sp-backward-sexp)
        ;; Manipulation
        ("C-M-k" . sp-kill-sexp)
        ("C-M-w" . sp-copy-sexp)
        ("M-<delete>" . sp-unwrap-sexp)
        ("C-]" . sp-select-next-thing)
        ("C-M-]" . sp-select-previous-thing))
  :demand t
  :config
  ;; Enable the default configuration.
  (require 'smartparens-config)
  ;; Toggle Show-Smartparens mode(highlight parenthesis) in all buffers.
  (show-smartparens-global-mode +1)
  ;; Toggle Smartparens mode in all buffers.
  (smartparens-global-mode +1)
  :diminish smartparens-mode)
#+end_src
*** Snippets
A template system(a code [[https://github.com/joaotavora/yasnippet][snippets]]).
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :ensure t
  :config
  ;; Move 'yasnippet' related util files to the common directory.
  (setq yas-snippet-dirs (list (my-make-valid-path
                                (my-get-full-emacs-path
                                 ".cache/yasnippet/snippets/"))))
  ;; Activate yasnippet mode globally.
  (yas-global-mode +1))

(use-package yasnippet-snippets
  :ensure t
  :after (yasnippet)
  :config
  (yasnippet-snippets-initialize))
#+end_src
*** Autocomplete
A text [[http://company-mode.github.io/][completion.]]
#+begin_src emacs-lisp :tangle yes
(use-package company
  :ensure t
  :config
  ;; Activate company mode globally.
  (global-company-mode +1))

(use-package company-dabbrev
  :after (company)
  :config
  ;; Disable downcasing of complete candidates.
  (setq company-dabbrev-downcase nil
        company-dabbrev-ignore-case t)
  ;; Merge results of capf and dabbrev backends.
  (setf (car (member 'company-capf company-backends))
        '(company-capf company-dabbrev)))
#+end_src
*** Syntax checking
On the [[http://www.flycheck.org/en/latest/][fly syntax checking.]]
#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :ensure t
  :config
  ;; Use Emacs `load-path' for checking elisp files.
  (setq flycheck-emacs-lisp-load-path 'inherit))
#+end_src
** Interface enchancement
*** General
**** Use "y" or "n" instead of "yes" or "not"
 #+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
 #+end_src
*** External commands execution
Automate running [[https://github.com/ffevotte/multi-compile][multiple shell commands.]]
 #+begin_src emacs-lisp :tangle yes
(use-package multi-compile
  :ensure t
  :config
  ;; Make "multi-compile-alist" safe as local variable.
  ;; It's useful for creating ".dir-locals.el".
  (put 'multi-compile-alist 'safe-local-variable #'listp)
  ;; Move 'multi-compile' related util files to the common directory.
  (setq multi-compile-history-file
        (my-make-valid-path
         (my-get-full-emacs-path
          ".cache/multi-compile/multi-compile.cache")))
  ;; Set "helm" completion system after "helm" is loaded.
  (with-eval-after-load 'helm
    (setq multi-compile-completion-system 'helm)))
 #+end_src
*** Text-based command execution interface
A convenient interface for [[https://magit.vc/manual/transient.html][commands]] execution.
#+begin_src emacs-lisp :tangle yes
(use-package transient
  :ensure t
  :config
  ;; Move `transient' related util files to the common directory.
  (setq transient-history-file (my-make-valid-path
                                (my-get-full-emacs-path
                                 ".cache/transient/history.el"))))
#+end_src
*** Incremental completions
**** COMMENT Ido
**** COMMENT Ivy
**** Helm
1. [[https://github.com/emacs-helm/helm][Incremental completions and narrowing selections.]]
2. Show [[https://www.flycheck.org/en/latest/][Flycheck]] errors with [[https://github.com/emacs-helm/helm][Helm.]]
#+begin_src emacs-lisp :tangle yes
(use-package helm
  :ensure t
  :bind
  ("C-c h" . helm-command-prefix)
  ("M-x" . helm-M-x)
  ("M-y" . helm-show-kill-ring)
  ("C-x b" . helm-mini)
  ("C-x C-f" . helm-find-files)
  (:map helm-command-map
        ("o" . helm-occur))
  (:map helm-map
        ([tab] . helm-execute-persistent-action)
        ("C-i" . helm-execute-persistent-action)
        ("C-z" . helm-select-action))
  :init
  (require 'helm-global-bindings)
  :demand t
  :config
  ;; Commdand prefix setup:
  ;; The default "C-x c" is quite close to "C-x C-c",
  ;; which quits Emacs. Changed to "C-c h".
  (global-unset-key (kbd "C-x c"))
  (setq
   ;; Open helm buffer inside current window,
   ;; not occupy whole other window.
   helm-split-window-in-side-p t
   ;; Move to end or beginning of source
   ;; when reaching top or bottom of source.
   helm-move-to-line-cycle-in-source nil
   ;; Scroll 8 lines other window using M-<next>/M-<prior>.
   helm-scroll-amount 8
   ;; Search for library in `require' and `declare-function' sexp.
   helm-ff-search-library-in-sexp t
   ;; Follow results.
   helm-follow-mode-persistent t)
  ;; Toggle helm in all buffers.
  (helm-mode +1)
  :diminish helm-mode)

(use-package helm-flycheck
  :ensure t
  :after (helm flycheck)
  :bind
  (:map flycheck-mode-map
        ("C-c f h" . helm-flycheck)))
#+end_src
*** Pop-ups
1. [[https://github.com/expez/company-quickhelp][Documentation popup]] for [[http://company-mode.github.io/][Company.]]
2. Displaying [[http://www.flycheck.org/en/latest/][Flycheck]] errors in [[https://github.com/flycheck/flycheck-pos-tip][tooltip.]]
3. Popup [[https://github.com/syohex/emacs-git-messenger][commit message]] at the current line.
#+begin_src emacs-lisp :tangle yes
(use-package company-quickhelp
  :ensure t
  :after (company)
  :bind
  (:map company-active-map
        ("M-h" . company-quickhelp-manual-begin))
  :config
  ;; Don't show quickhelp popup automatically.
  (setq company-quickhelp-delay nil)
  ;; Activate `company-quickhelp' mode globally.
  (company-quickhelp-mode +1))

(use-package flycheck-pos-tip
  :ensure t
  :after (flycheck)
  :config
  ;; Activate `flycheck-pos-tip-mode' mode globally.
  (flycheck-pos-tip-mode +1))

(use-package git-messenger
  :ensure t
  :bind
  ("C-c d m" . git-messenger:popup-message)
  :config
  (with-eval-after-load 'magit
    (setq git-messenger:use-magit-popup t)))
#+end_src
** Search & Navigation
*** General
**** Smooth scrolling
[[https://www.emacswiki.org/emacs/SmoothScrolling][About smooth scrolling.]]
#+begin_src emacs-lisp :tangle yes
(setq scroll-conservatively 10000)
#+end_src
*** Jump between matched patterns
[[https://github.com/ShingoFukuyama/helm-swoop][Efficiently hopping squeezed lines.]]
#+begin_src emacs-lisp :tangle yes
(use-package helm-swoop
  :ensure t
  :after (helm)
  :bind
  ("C-c s s" . helm-swoop)
  ("C-c s m" . helm-multi-swoop)
  ("C-c s a" . helm-multi-swoop-all)
  ("C-c s p" . helm-multi-swoop-projectile)
  ("M-I" . helm-swoop-back-to-last-point)
  (:map isearch-mode-map
        ;; When doing isearch, hand the word over to helm-swoop
        ("M-i" . helm-swoop-from-isearch))
  :config
  (setq
   ;; If this value is t, split window inside the current window.
   helm-swoop-split-with-multiple-windows t
   ;; Split direcion.
   helm-swoop-split-direction 'split-window-vertically
   ;; If nil, you can slightly boost invoke speed
   ;; in exchange for text color.
   helm-swoop-speed-or-color t))
#+end_src
** Project management
*** Project (group of files) Interaction
[[https://github.com/bbatsov/projectile][Project]] [[https://github.com/bbatsov/helm-projectile][interaction library.]]
#+begin_src emacs-lisp :tangle yes
(defun my--projectile-mode-line-function ()
  "Report project name."
  (format " Proj[%s]" (projectile-project-name)))

(use-package helm-projectile
  :ensure t
  :after (helm)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  ;; Use helm completion system.
  (setq projectile-completion-system 'helm)
  (helm-projectile-on)
  ;; Mode of action after switch a project.
  (setq projectile-switch-project-action 'helm-projectile)
  ;; Format mode line indecator for projectile.
  (setq projectile-mode-line-function #'my--projectile-mode-line-function)
  ;; Move 'projectile' related util files to the common directory.
  (setq projectile-cache-file
        (my-make-valid-path
         (my-get-full-emacs-path
          ".cache/projectile/projectile.cache")))
  (setq projectile-known-projects-file
        (my-make-valid-path
         (my-get-full-emacs-path
          ".cache/projectile/known-projects.eld")))
  ;; Activate projectile mode globally.
  (projectile-mode +1))
#+end_src
*** Organizer
1. [[http://orgmode.org/][Keeping notes, maintaining TODO lists, planning projects.]]
2. [[https://gitlab.com/oer/org-re-reveal][Build HTML presentations with reveal.js]] from Org mode source files.
#+begin_src emacs-lisp :tangle yes
(use-package org
  :ensure t
  :bind
  ("C-c l" . org-store-link)
  ("C-c c" . org-capture)
  ("C-c a" . org-agenda)
  :config
  (setq
   ;; Information to record when a task moves to the DONE state.
   org-log-done 'time
   ;; List of export backends.
   org-export-backends '(ascii html icalendar latex md)
   ;; Indent the code inside "src" block according to a mode.
   org-src-tab-acts-natively t
   ;; Fontify the code inside "src" block according to a mode.
   org-src-fontify-natively t
   ;; Preserve indents of the code inside "src" block on export.
   org-src-preserve-indentation t
   ;; Directory with org files.
   org-directory (my-get-full-emacs-path "org/")
   ;; Show full outline path at once.
   org-outline-path-complete-in-steps nil
   ;; Provide refile targets as paths.
   org-refile-use-outline-path t
   ;; Use headlines with level 2 or less as refile targets.
   org-refile-targets '((nil . (:maxlevel . 2)))
   ;; List of agenda files.
   org-agenda-files (list (my-get-full-emacs-path "org/"))))

(use-package org-re-reveal
  :ensure t
  :after (org)
  :config
  (setq org-re-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.8.0/"))
#+end_src
** Languages
*** C#
**** Navigation, autocomplete, syntax checking
[[http://www.omnisharp.net/][IDE-like features for editing files]] in C# solutions for Emacs.
#+begin_src emacs-lisp :tangle yes
(defun my--set-csharp-company-backends ()
  "Set the list of company backends for C# locally."
  (setq-local company-backends
              '((company-omnisharp
                 :separate
                 company-dabbrev
                 company-yasnippet))))

(use-package omnisharp
  :ensure t
  :bind
  (:map csharp-mode-map
        ("M-." . omnisharp-go-to-definition)
        ("M-?" . omnisharp-helm-find-usages)
        ("C-c r" . omnisharp-run-code-action-refactoring))
  :hook (csharp-mode . omnisharp-mode)
  :config
  ;; Use custom version of omnisharp server.
  (setq omnisharp-expected-server-version "1.30.1")
  ;; Define company backends for C#.
  (with-eval-after-load 'company
    (add-hook 'csharp-mode-hook #'my--set-csharp-company-backends))
  ;; Use flycheck for C#.
  (with-eval-after-load 'flycheck
    (add-hook 'csharp-mode-hook #'flycheck-mode)))
 #+end_src
*** C++
**** General
***** Use 4 spaces indentation for C++
#+begin_src emacs-lisp :tangle yes
(defun my--set-c++-code-style ()
  "Set code style for C++ language."
  (c-set-style "stroustrup"))

(add-hook 'c++-mode-hook #'my--set-c++-code-style)
#+end_src
**** Navigation, autocomplete, syntax checking
1. [[https://github.com/Andersbakken/rtags][Client/Server indexer]] for C, C++ with integration for Emacs.
2. [[https://github.com/Sarcasm/irony-mode][Improving the editing experience]] for the C, C++.
#+begin_src emacs-lisp :tangle yes
(use-package pulse
  :ensure t
  :config
  (setq
   ;; Use pulsing for momentary highlighting.
   pulse-flag t
   ;; Modify the behavior of `pulse-line-hook-function':
   ;; it will pulse the current line.
   pulse-command-advice-flag t))

(defun my--pulse-line-hook-function (&optional prefix)
  "Wrapper around `pulse-line-hook-function' with the ignored PREFIX argument.
It is used as advice for several `rtags' functions."
  (ignore prefix)
  (pulse-line-hook-function))

(use-package rtags
  :disabled
  :ensure t
  :bind
  (:map c-mode-map
        ("M-." . rtags-find-symbol-at-point)
        ("M-?" . rtags-find-references-at-point)
        ("M-," . rtags-location-stack-back)
        :map c++-mode-map
        ("M-." . rtags-find-symbol-at-point)
        ("M-?" . rtags-find-references-at-point)
        ("M-," . rtags-location-stack-back))
  :hook ((c-mode c++-mode) . rtags-start-process-unless-running)
  :config
  ;; Set installation path for RTags server.
  (setq rtags-install-path (my-make-valid-path
                            (my-get-full-emacs-path
                             ".cache/rtags")))
  ;; Add line pulsing for `rtags' search functions:
  (advice-add 'rtags-find-symbol-at-point
              :after 'my--pulse-line-hook-function)
  (advice-add 'rtags-find-references-at-point
              :after 'my--pulse-line-hook-function)
  (advice-add 'rtags-location-stack-back
              :after 'my--pulse-line-hook-function))

(use-package helm-rtags
  :ensure t
  :after (helm rtags)
  :config
  ;; Integrate RTags with Helm.
  (setq rtags-display-result-backend 'helm))

(with-eval-after-load 'flycheck
  (add-hook 'c-mode-hook #'flycheck-mode)
  (add-hook 'c++-mode-hook #'flycheck-mode))

(use-package flycheck-irony
  :ensure t
  :after (flycheck irony)
  ;; Integrate flycheck with irony.
  :hook (flycheck-mode . flycheck-irony-setup))

(defun my--irony-setup-completion-functions ()
  "Replace the `completion-at-point' and `complete-symbol' bindings
in irony-mode's buffers by irony-mode's function."
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))

(use-package irony
  :disabled
  :ensure t
  :hook ((c-mode c++-mode) . irony-mode)
  :config
  ;; Rebind completion functions for irony mode.
  (add-hook 'irony-mode-hook #'my--irony-setup-completion-functions)
  ;; Setup C++ completion database(according to compile options).
  (add-hook 'irony-mode-hook #'irony-cdb-autosetup-compile-options)
  ;; Move `irony' related util files to the common directory.
  (setq irony-user-dir (my-make-valid-path
                        (my-get-full-emacs-path
                         ".cache/irony/"))))

(use-package company-irony
  :ensure t
  :after (company irony)
  ;; Integrate company with irony.
  :hook (irony-mode . company-irony-setup-begin-commands))

(defun my--set-c++-company-backends ()
  "Set the list of company backends for C++ locally."
  (if (boundp 'company-backends)
      (setq-local company-backends
                  '((company-irony
                     company-irony-c-headers
                     :separate
                     company-dabbrev
                     company-yasnippet)))))

(use-package company-irony-c-headers
  :ensure t
  :after (company irony)
  ;; Define company backends for C++.
  :hook (irony-mode . my--set-c++-company-backends))
#+end_src
*** Common Lisp
**** Navigation, autocomplete, syntax checking
[[https://github.com/joaotavora/sly][Common Lisp IDE.]]
#+begin_src emacs-lisp :tangle yes
(defun my--set-lisp-company-backends ()
  "Set the list of company backends for Common Lisp locally."
  (if (boundp 'company-backends)
      (setq-local company-backends '(company-capf))))

(use-package sly
  :ensure t
  :config
  (with-eval-after-load 'company
    (add-hook 'lisp-mode-hook #'my--set-lisp-company-backends)
    (add-hook 'sly-mrepl-hook #'my--set-lisp-company-backends)))
#+end_src
*** Dockerfile
[[https://github.com/spotify/dockerfile-mode][Dockerfile support.]]
#+begin_src emacs-lisp :tangle yes
(use-package dockerfile-mode
  :ensure t)
#+end_src
*** Web
[[http://web-mode.org/][Web support.]]
#+begin_src emacs-lisp :tangle yes
(use-package web-mode
  :ensure t
  :mode ("\\.html?\\'" "\\.xml?\\'" "\\.css\\'"
         "\\.scss\\'" "\\.js\\'" "\\.tpl\\'")
  :config
  ;; Setup HTML, CSS and script indentation.
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2))
#+end_src
*** Emacs Lisp
**** Syntax checking
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'flycheck
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode))
#+end_src
*** PlantUML
**** General
[[https://github.com/skuro/plantuml-mode][A major mode]] for editing [[https://plantuml.com/][PlantUML]] sources in Emacs.
#+begin_src emacs-lisp :tangle yes
(use-package plantuml-mode
  :ensure t
  :config
  ;; Use system executable as PlantUML backend service.
  (setq plantuml-default-exec-mode 'executable)
  ;; Setup PlantUML indentation.
  (setq plantuml-indent-level 4)
  ;; Use SVG output format for generated diagrams.
  (setq plantuml-output-type "svg"))
#+end_src
**** Syntax checking
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'flycheck
  (add-hook 'plantuml-mode-hook #'flycheck-mode))

(use-package flycheck-plantuml
  :ensure t
  :after (flycheck plantuml-mode)
  :hook (flycheck-mode . flycheck-plantuml-setup))
#+end_src
*** Thrift
[[https://github.com/facebook/fbthrift][Thrift IDL support.]]
#+begin_src emacs-lisp :tangle yes
(use-package thrift
  :ensure t
  :mode ("\\.thrift\\'" . thrift-mode))
#+end_src
** Integration
*** Docker
[[https://github.com/Silex/docker.el][Manage docker from Emacs.]]
#+begin_src emacs-lisp :tangle yes
(use-package docker
  :ensure t)
#+end_src
*** Remote file access
[[https://www.gnu.org/software/tramp/][TRAMP]] is for transparently accessing remote files from within Emacs.
#+begin_src emacs-lisp :tangle yes
(use-package tramp
  :ensure t
  :config
  ;; Move `tramp' related util files to the common directory.
  (setq tramp-persistency-file-name (my-make-valid-path
                                     (my-get-full-emacs-path
                                      ".cache/tramp/tramp")))
  ;; It seems that "ssh" method is faster than the default method "scp".
  (setq tramp-default-method "ssh"))
#+end_src
*** Shell
[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][Eshell]] is a shell-like command interpreter implemented in Emacs Lisp.
#+begin_src emacs-lisp :tangle yes
(use-package eshell
  :ensure t
  :config
  ;; Move `eshell' related util files to the common directory.
  (setq eshell-directory-name (my-make-valid-path
                               (my-get-full-emacs-path
                                ".cache/eshell/"))))
#+end_src
** Version control
*** Git
Interface to the version control system Git: [[https://magit.vc/][Magit!!!]]
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :ensure t
  :bind
  ("C-c d s" . magit-status)
  ("C-c d i" . magit-init)
  ("C-c d c" . magit-clone))

(use-package magit-lfs
  :ensure t
  :after (magit))
#+end_src
*** Subversion
[[https://github.com/magit/magit-svn][Git-Svn extension]] for [[https://magit.vc/][Magit.]]
#+begin_src emacs-lisp :tangle yes
(use-package magit-svn
  :ensure t
  :after (magit))
#+end_src
